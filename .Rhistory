airquality
par(mfrow=c(1,2))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Ozone,airquality$Solar,main="Ozone and Solar Radiation")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
plot(airquality$Wind,airquality$Ozone,main="Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone.R, main = "Ozone and Solar Radiation")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temparature")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
title("Ozone and Weather in New York City")
mtext("Ozone and Weather in New York City", outer = TRUE)
submit()
swirl()
install.packages("Reproducible Research")
install_from_swirl("Reproducible Research")
install_from_swirl("Reproducible Research")
install_from_swirl("Statistical Inference")
swirl()
swirl()
airquality
head(airquality)
xyplot(y ~ x | f * g, data)
xyplot(Ozone ~ window() | f * g, data)
xyplot(Ozone ~ wind | f * g, data)
xyplot(Ozone ~ wind | f * g, airquality)
airquality
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality,col="red",pch=8,main="Big Apple Data")
library(swirl)
install_from_swirl("Regression Models")
swirl()
swirl()
airquality
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout=c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout=c(5,1))
xyplot(Ozone~Wind,data=airquality)
p<-xyplot(Ozone~Wind,data=airquality)
p
p
names(p_)
names(p)
mynames[myfull]
p[["formula"]]
x.limits
airquality
p[["x.limits"]]
play()
library("swirl")
swirl()
f
table(f)
xyplot
xyplot(y ~ x | f, layout = c(2, 1))
v1
c2
v2
myedit("plot1.R")
pathtofile(plot1.R, local= TRUE)
pathtofile(plot1.R, local(TRUE))
pathtofile()
pathtofile
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot1.R")
myedit("plot2.R")
pathtofile("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
table diamonds$color
table(diamonds$color)
table(diamonds$color,diamonds$cut)
myedit(myLabels.R)
myedit
myedit("myLabels.R")
pathtofile("myLabels.R")
pathtofile("myLabels.R",local=TRUE)
source(pathtofile("myLabels.R",local=TRUE))
source(pathtofile("myLabels.R"),local=TRUE)
xyplot(price~caarat|color*cut,data set=diamonds)
xyplot("price~caarat|color*cut,data set=diamonds"")
_
)
xyplot(price~carat|color*cut,data set=diamonds)
xyplot(price~carat|color*cut,data.set=diamonds)
xyplot
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
library("swirl")
swirl()
library(swirl)
swirl()
cmat
call()
cx,cy
call(cx,cy)
?
)
centroids
pch
lwd=2
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
points(x,y)
mdist(x,y,cx,cy)
distTmp()
min()
apply(distTmp,2,which.min)
cols1[newClust]
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
apply(y)
tapply(y,newClust,mean)
cex
cex=2
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
distance(x,y,newCx,newCy)
distance(orange,x,y,newCx,newCy)
newCx
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
newClust2
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(data.frame(x,y),3)
kmeans(dataFrame,centers=3)
cluster
kmObj
kmObj$iter
kmObj$cluster
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
kmObj$centers
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
library(kernlab)
library(kernlab)
data(spam)
setwd('C:/Users/user/Desktop/PeerAssessment1')
getwd()
fileUrl<-"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
download.file(fileUrl,destfile = "data_activity.zip")
unzip("data_activity.zip",exdir="activity_data")
list.files("activity_data")
path <-'C:/Users/user/Desktop/PeerAssessment1/activity_data/activity.csv'
activity_data<- read.csv(path, header = TRUE, sep=)
activity_data<- read.csv(path, header = TRUE)
head(activity_data)
str(activity_data)
activity_data$date <- as.Date(activity_data$date,format="%Y-%m-%d")
activity_data$interval <- as.factor(activity_data$interval)
head(activity_data)
str(activity_data)
library(ggplot2)
total_steps_per_day <- aggregate(steps~date,activity_data,sum,na.rm=TRUE)
head(total_steps_per_day)
qplot(total_steps_per_day$steps,binwidth=1000,xlab="Interval",ylab="Frequency (count)",main="Total number of steps taken per day")
mean(total_steps_per_day$steps,na.rm=TRUE)
##Note:
sum(activity_data$steps,na.rm=TRUE)           #570608
median(total_steps_per_day$steps,na.rm=TRUE)
daily_activity_average <- aggregate(steps~interval,data=activity_data,mean,na.rm=TRUE)
names(daily_activity_average)<-c("interval","steps")
head(daily_activity_average)
str(daily_activity_average)
plot(daily_activity_average$interval,
daily_activity_average$steps,
type="l",
col="blue",
xlab="5-minute Interval",
ylab="Average Number of Steps Taken",
main="Average Daily Activity")
plot(daily_activity_average$interval,
daily_activity_average$steps,
type="l",
lwd=2,
col="blue",
xlab="5-minute Interval",
ylab="Average Number of Steps Taken",
main="Average Daily Activity")
?lty
plot(daily_activity_average$interval,
daily_activity_average$steps,
type="l",
lwd=2,
lty=1
col="blue",
xlab="5-minute Interval",
ylab="Average Number of Steps Taken",
main="Average Daily Activity")
plot(daily_activity_average$interval,
daily_activity_average$steps,
type="l",
lwd=2,
lty=1,
col="blue",
xlab="5-minute Interval",
ylab="Average Number of Steps Taken",
main="Average Daily Activity")
plot(daily_activity_average$interval,
daily_activity_average$steps,
type="l",
col="black",
xlab="5-minute Interval",
ylab="Average Number of Steps Taken",
main="Average Daily Activity")
daily_activity_average <- aggregate(x=list(steps=activity_data$steps),
by = list(interval=activity_data$interval),
FUN=mean,na.rm=TRUE)
head(daily_activity_average)
str(daily_activity_average)
library(ggplot2)
daily_activity_average <- aggregate(x=list(steps=activity_data$steps),
by = list(interval=activity_data$interval),
FUN=mean,na.rm=TRUE)
head(daily_activity_average)
str(daily_activity_average)
ggplot(daily_activity_average,aes(x=interval,y=steps))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
head(daily_activity_average)
ggplot(daily_activity_average,aes(x=as.numeric(interval),y=steps))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
head(daily_activity_average)
ggplot(daily_activity_average,aes(x=interval,y=steps,group=1))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
ggplot(daily_activity_average,aes(x=interval,y=steps,group=g))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
daily_activity_average <- aggregate(x=list(steps=activity_data$steps),
by = list(interval=as.numeric(as.character(activity_data$interval))),
FUN= "mean",na.rm=TRUE)
head(daily_activity_average)
str(daily_activity_average)
ggplot(daily_activity_average,aes(x=interval,y=steps,group=g))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
ggplot(daily_activity_average,aes(x=interval,y=steps))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
daily_activity_average <- aggregate(x=list(steps=activity_data$steps),
by = list(interval=as.numeric(activity_data$interval)),
FUN= "mean",na.rm=TRUE)
head(daily_activity_average)
str(daily_activity_average)
ggplot(daily_activity_average,aes(x=interval,y=steps))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
?as.character
daily_activity_average <- aggregate(x=list(steps=activity_data$steps),
by = list(interval=as.numeric(as.character(activity_data$interval))),
FUN= "mean",na.rm=TRUE)
head(daily_activity_average)
str(daily_activity_average)
ggplot(daily_activity_average,aes(x=interval,y=steps))+
geom_line()+
labs(x="5-minute interval",y="Average Number of Steps Taken",title="Average Daily Activity Pattern")
max_num <- averages[which.max(daily_activity_average$interval),]
max_num <- daily_activity_average[which.max(daily_activity_average$interval),]
max_num
max_num <- daily_activity_average[which.max(daily_activity_average$steps),]
max_num
missing_values<-is.na(activity_data$steps)
missing_values
sum(missing_values)
?impute
rm(values)
missing_filled<- function(steps,interval){
values<-NA
if(is.na(steps))
values <- (activity_average[average$interval == interval,"steps"])
else
values <- c(steps)
return (values)
}
missing_filled
str(missing_filled)
missing_filled<- function(steps,interval){
values<-NA
if(is.na(steps))
values <- (daily_activity_average[daily_activity_average$interval == interval,"steps"])
else
values <- c(steps)
return (values)
}
str(missing_filled)
rm(missing_values)
completed_data <- activity_data
completed_data$steps<-mapply(missing_filled,completed_data$steps,completed_data$interval)
str(completed_data$steps)
str(completed_data)
head(completed_data)
tail(completed_data)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
total_steps<-tapply(completed_data$steps,completed_data$date,FUN=sum)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
mean(total_steps)
qplot(total_steps,binwidth=1000,col="orange",xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
mean(total_steps)
qplot(total_steps,binwidth=1000,fill="blue",col="orange",xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
mean(total_steps)
qplot(total_steps,binwidth=1000,col="blue",xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",color="orange")
total_steps<-tapply(completed_data$steps,completed_data$date,FUN=sum)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",color="orange")
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",fill=cut)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",fill=cut)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",color=cut)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",color=cut)
?qplot
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",fill=mopos)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day",fill=orange)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
head(total_steps)
tail(total_steps)
str(total_steps)
qplot(total_steps,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
mean(total_steps)
median(total_steps)
total_steps_per_day <- aggregate(steps~date,activity_data,sum,na.rm=TRUE)
head(total_steps_per_day)
qplot(total_steps_per_day$steps,binwidth=1000,xlab="Interval",ylab="Frequency (count)",main="Total number of steps taken per day")
mean(total_steps_per_day$steps,na.rm=TRUE)
##Note:
sum(activity_data$steps,na.rm=TRUE)           #570608
median(total_steps_per_day$steps,na.rm=TRUE)
mean(total_steps_per_day$steps,na.rm=TRUE)
rm(total_steps)
completed_data$steps<-mapply(missing_filled,completed_data$steps,completed_data$interval)
head(completed_data)
tail(completed_data)
str(completed_data)
new_total<-tapply(completed_data$steps,completed_data$date,FUN=sum)
head(new_total)
tail(new_total)
str(new_total)
qplot(new_total,binwidth=1000,xlab="Interval",ylab="Frequency(count)",main="Total number of steps taken per day")
mean(new_total)
median(new_total)
mean(daily_activity_average)
str(daily_activity_average)
head(daily_activity_average)
daily_activity_average
mean(daily_activity_average)
mean(daily_activity_average,na.rm=TRUE)
?weekdays
head(new_total)
tail(new_total)
str(new_total)
weekend <- weekdays(as.Date(completed_data$steps)%in% c("Saturday","Sunday"))
weekend <- weekdays(as.Date(completed_data$steps))%in% c("Saturday","Sunday"))
weekend <- weekdays(as.Date(completed_data$steps))%in% c("Saturday","Sunday")
weekend <- weekdays(as.Date(completed_data$date))%in% c("Saturday","Sunday")
head(weekend)
final_activity <- completed_data
weekend <- weekdays(as.Date(final_activity$date))%in% c("Saturday","Sunday")
final_activity$daytype <- "weekday"
final_activity$daytype <- "weekday"
final_activity$daytype[weekend == TRUE] <- "weekend"
final_activity$daytype <- as.factor(final_activity$daytype)
str(final_activity)
head(final_activity)
tail(final_activity)
str(final_activity)
head(final_activity,5)
final_activity <- completed_data
weekend <- weekdays(as.Date(final_activity$date))%in% c("Saturday","Sunday")
final_activity$daytype <- "weekday"
final_activity$daytype[weekend == TRUE] <- "weekend"
final_activity$daytype <- as.factor(final_activity$daytype)
head(final_activity)
tail(final_activity)
str(final_activity)
head(final_activity,5)
?as.Date
final_activity <- completed_data
weekend <- weekdays(as.Date(final_activity$date)%in% c("Saturday","Sunday"))
weekend <- weekdays(as.Date(final_activity$date))%in% (c("Saturday","Sunday"))
final_activity$daytype <- "weekday"
final_activity$daytype[weekend == TRUE] <- "weekend"
final_activity$daytype <- as.factor(final_activity$daytype)
head(final_activity)
tail(final_activity)
str(final_activity)
head(final_activity,5)
final_activity$daytype <- weekdays(as.Date(final_activity$date))
head(final_activity)
tail(final_activity)
str(final_activity)
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
final_activity$daytype <- "weekday"
head(final_activity)
tail(final_activity)
str(final_activity)
weekend <- c("Saturday","Sunday")
final_activity$daytype <- "weekend"
final_activity$daytype <- as.factor(final_activity$daytype)
head(final_activity)
tail(final_activity)
str(final_activity)
final_activity <- completed_data
final_activity$daytype <- weekdays(as.Date(final_activity$date))
weekday<-c("Monday","Tuesday","Wednesday","Thursday","Friday")
final_activity$daytype <- "weekday"
weekend <- c("Saturday","Sunday")
final_activity$daytype <- "weekend"
head(final_activity)
tail(final_activity)
str(final_activity)
Weekdays <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
final_activity <- completed_data
final_activity$daytype <- as.factor(ifelse(is.element(weekdays(as.Date(final_activity$daytype)),weekdays),"Weekday","Weekend"))
final_activity$daytype <- as.factor(ifelse(is.element(weekdays(as.Date(final_activity$date)),weekdays),"Weekday","Weekend"))
rm(Weekdays)
Weekday <- c("Monday","Tuesday","Wednesday","Thursday","Friday")
final_activity <- completed_data
final_activity$daytype <- as.factor(ifelse(is.element(weekdays(as.Date(final_activity$date)),weekdays),"Weekday","Weekend"))
final_activity$daytype <- as.factor(ifelse(is.element(weekdays(as.Date(final_activity$date)),weekday),"Weekday","Weekend"))
head(final_activity)
tail(final_activity)
str(final_activity)
head(final_activity,5)
final_activity
?ifelse
library(lattice)
mean_comparison<-aggregate(steps~interval + daytype, final_activity,mean)
xyplot(
mean_comparison ~ interval | daytype,
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends"
)
mean_comparison<-aggregate(steps~interval + daytype, final_activity,mean)
xyplot(
mean_comparison$steps~mean_comparisons$interval | mean_comparisons$daytype,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends"
)
xyplot(
mean_comparison$steps~mean_comparison$interval | mean_comparison$daytype,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends"
)
mean_comparison<-aggregate(steps~interval + daytype, final_activity,mean)
xyplot(
mean_comparison$steps~interval | daytype
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends"
)
xyplot(
mean_comparison$steps~interval | daytype,
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends"
)
?xyplot
xyplot(
mean_comparison$steps~interval | daytype,
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends",
col = "orange"
)
xyplot(
mean_comparison$steps~interval | daytype,
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends",
col = "sunshine"
)
xyplot(
mean_comparison$steps~interval | daytype,
mean_comparison,
type = "l",
layout = c(1,2),
xlab = "5-minute Interval",
ylab = "Average Number of Steps Taken",
main = "The Different of Activity Pattern between Weekdays and Weekends",
col = "purple"
)
final_activity$daytype <-as.factor(ifelse(is.element(weekdays(as.Date(final_activity$date)),weekday),"Weekday","Weekend"))
final_activity$daytype <-as.factor(ifelse(is.element(weekdays(as.Date(final_activity$date)),weekday),"Weekday","Weekend"))
